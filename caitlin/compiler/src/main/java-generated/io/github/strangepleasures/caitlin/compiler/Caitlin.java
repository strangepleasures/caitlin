/* This file was generated by the Caitlin compiler. Do not edit manually. */
package io.github.strangepleasures.caitlin.compiler;

import static io.github.strangepleasures.caitlin.stdlib.StdLib.*;
import static com.github.javaparser.StaticJavaParser.getParserConfiguration;
import com.github.javaparser.ParserConfiguration;
import com.github.javaparser.StaticJavaParser;
import com.github.javaparser.ast.visitor.ModifierVisitor;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

public abstract class Caitlin {

    private Caitlin() {
    }

    private static final List<ModifierVisitor<Void>> postprocessors = List.of(new HeaderPostprocessor());

    public static void transpileDir(File source, File target) throws IOException {
        var cfg = getParserConfiguration();
        cfg.setLanguageLevel(ParserConfiguration.LanguageLevel.CURRENT);
        cfg.setStoreTokens(false);
        target.mkdirs();
        for (var child : source.listFiles()) {
            if (child.isDirectory()) {
                transpileDir(child, new File(target, child.getName()));
            } else {
                var name = child.getName();
                if (name.toLowerCase().endsWith(".cat")) {
                    var targetName = name.substring(0, name.length() - 3) + "java";
                    transpileFile(child, new File(target, targetName));
                }
            }
        }
    }

    static void transpileFile(File source, File target) throws IOException {
        System.out.println("Transpiling " + source);
        var javaCode = transpileFile(source);
        try (var fw = new FileWriter(target);
            var bw = new BufferedWriter(fw)) {
            bw.write(javaCode);
        }
    }

    static String transpileFile(File source) throws IOException {
        var compilationUnit = StaticJavaParser.parse(source);
        postprocessors.forEach(postprocessor -> postprocessor.visit(compilationUnit, null));
        return compilationUnit.toString();
    }
}
